import cv2
import mediapipe as mp                           
import pyautogui
import numpy as np


mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(
    max_num_hands=1,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.7
)


screen_width, screen_height = pyautogui.size()


cap = cv2.VideoCapture(0)

while cap.isOpened():
    success, image = cap.read()
    if not success:
        break

    image = cv2.flip(image, 1)
    h, w, _ = image.shape

    
    rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_image)

    if results.multi_hand_landmarks:
        for hand_landmarks in results.multi_hand_landmarks:
            mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)

            
            landmarks = hand_landmarks.landmark
            index_finger_tip = landmarks[8]
            thumb_tip = landmarks[4]
            middle_finger_tip = landmarks[12]
            ring_finger_tip = landmarks[16]

            
            x = int(index_finger_tip.x * w)
            y = int(index_finger_tip.y * h)
            cv2.circle(image, (x, y), 10, (255, 0, 0), -1)

           
            screen_x = np.interp(index_finger_tip.x, [0, 1], [0, screen_width])
            screen_y = np.interp(index_finger_tip.y, [0, 1], [0, screen_height])
            pyautogui.moveTo(screen_x, screen_y)

            
            click_dist = np.linalg.norm(
                np.array([index_finger_tip.x, index_finger_tip.y]) -
                np.array([thumb_tip.x, thumb_tip.y])
            )
            right_click_dist = np.linalg.norm(
                np.array([index_finger_tip.x, index_finger_tip.y]) -
                np.array([ring_finger_tip.x, ring_finger_tip.y])
            )
            scroll_dist = abs(index_finger_tip.y - middle_finger_tip.y)

          
            if click_dist < 0.05:
                pyautogui.click()q
                cv2.putText(image, 'Left Click', (x + 20, y - 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

            elif right_click_dist < 0.05:
                pyautogui.rightClick()
                cv2.putText(image, 'Right Click', (x + 20, y - 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 0), 2)

            elif scroll_dist < 0.02:
                pyautogui.scroll(20)
                cv2.putText(image, 'Scroll Up', (x + 20, y - 20),
                            cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    
    cv2.imshow("Virtual Mouse", image)

    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        breakq

cap.release()
cv2.destroyAllWindows()
